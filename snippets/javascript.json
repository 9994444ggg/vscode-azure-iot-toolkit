{
    "Send D2C message": {
        "prefix": "iotSendD2CMessage",
        "description": "Send D2C message",
        "body": [
            "'use strict';",
            "",
            "var clientFromConnectionString = require('azure-iot-device-mqtt').clientFromConnectionString;",
            "var Message = require('azure-iot-device').Message;",
            "var connectionString = '<deviceConnectionString>';",
            "var client = clientFromConnectionString(connectionString);",
            "",
            "function printResultFor(op, client) {",
            "\treturn function printResult(err, res) {",
            "\t\tif (err) console.log(op + ' error: ' + err.toString());",
            "\t\tif (res) console.log(op + ' status: ' + res.constructor.name);",
            "\t\tclient.close();",
            "\t};",
            "}",
            "",
            "var connectCallback = function (err) {",
            "\tif (err) {",
            "\t\tconsole.log('Could not connect: ' + err);",
            "\t} else {",
            "\t\tconsole.log('Client connected');",
            "\t\tvar data = 'Hello IoT Hub!';",
            "\t\tvar message = new Message(data);",
            "\t\tconsole.log('Sending message: ' + message.getData());",
            "\t\tclient.sendEvent(message, printResultFor('send', client));",
            "\t}",
            "};",
            "",
            "client.open(connectCallback);"
        ]
    },
    "Monitor D2C message": {
        "prefix": "iotMonitorD2CMessage",
        "description": "Monitor D2C message",
        "body": [
            "'use strict';",
            "",
            "var EventHubClient = require('azure-event-hubs').Client;",
            "",
            "var connectionString = '<iotHubConnectionString>';",
            "var printError = function (err) {",
            "\tconsole.log(err.message);",
            "};",
            "",
            "var printMessage = function (message) {",
            "\tconsole.log('Message received: ');",
            "\tconsole.log(JSON.stringify(message.body));",
            "\tconsole.log('');",
            "};",
            "",
            "var client = EventHubClient.fromConnectionString(connectionString);",
            "console.log('Start monitoring IoT Hub...')",
            "client.open()",
            "\t.then(client.getPartitionIds.bind(client))",
            "\t.then(function (partitionIds) {",
            "\t\treturn partitionIds.map(function (partitionId) {",
            "\t\t\treturn client.createReceiver('$$Default', partitionId, {",
            "\t\t\t\t'startAfterTime': Date.now()",
            "\t\t\t}).then(function (receiver) {",
            "\t\t\t\tconsole.log('Created partition receiver: ' + partitionId)",
            "\t\t\t\treceiver.on('errorReceived', printError);",
            "\t\t\t\treceiver.on('message', printMessage);",
            "\t\t\t});",
            "\t\t});",
            "\t})",
            "\t.catch(printError);"
        ]
    }
}